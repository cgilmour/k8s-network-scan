---
apiVersion: v1
kind: Namespace
metadata:
  name: kube-network-scan
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kns-job
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - services
  - serviceaccounts
  verbs:
  - get
  - create
  - list
  - update
  - delete
- apiGroups: [""]
  resources:
  - pods
  verbs:
  - get
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs:
  - create
  - list
  - update
  - delete
- apiGroups: ["rbac.authorization.k8s.io"]
  resources:
  - roles
  - rolebindings
  verbs:
  - create
  - delete
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kns-job
  namespace: kube-network-scan
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kns-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kns-job
subjects:
- kind: ServiceAccount
  name: kns-job
  namespace: kube-network-scan
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kns-job
  namespace: kube-network-scan
spec:
  template:
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      serviceAccountName: kns-job
      tolerations:
      - effect: NoSchedule
        operator: Exists
      restartPolicy: OnFailure
      containers:
      - name: kns-job
        image: ip-192-168-99-10:5000/cgilmour/kns-job:unspecified
        imagePullPolicy: Always
        command:
                - /bin/sleep
                - infinity
        env:
        - name: KNS_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KNS_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: usr-bin-kubectl
          mountPath: /usr/bin/kubectl
      volumes:
      - name: usr-bin-kubectl
        hostPath:
          path: /usr/bin/kubectl
